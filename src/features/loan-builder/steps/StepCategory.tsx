"use client";

/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: features/loan-builder/steps/StepCategory.tsx
 - Purpose: Module StepCategory.tsx supporting application features.
 - Context: Supports a feature area and composes with adjacent modules.
 - How it works: Provides supporting logic composed by higher-level modules. Uses: React Client Component, React Hook Form.
 - External imports: react-hook-form, framer-motion, lucide-react
 - Local imports: @/components/ui/field, @/components/ui/radio-group, ../motion.config, ../types
 - Refactoring ideas: Align with module boundaries and update tests accordingly.
 - Security considerations: Follow least-privilege and avoid leaking implementation details.
*/
import { Controller, useFormContext } from "react-hook-form";
import { motion } from "framer-motion";
import { Home, TrendingUp, GitMerge } from "lucide-react";
import {
  Field,
  FieldContent,
  FieldDescription,
  FieldError,
  FieldGroup,
  FieldLabel,
  FieldLegend,
  FieldSet,
  FieldTitle,
} from "@/components/ui/field";
import {
  RadioGroup,
  RadioGroupItem,
} from "@/components/ui/radio-group";
import { motionPresets } from "../motion.config";
import type { CreateLoanFormData, LoanCategory } from "../types";

const LOAN_CATEGORIES = [
  {
    id: "asset_backed" as LoanCategory,
    icon: Home,
    title: "Asset-Backed Loan",
    description: "Traditional loan secured by property collateral",
    color: "text-blue-600",
  },
  {
    id: "yield_note" as LoanCategory,
    icon: TrendingUp,
    title: "Yield Note / Capital Placement",
    description: "Investor return agreement without property collateral",
    color: "text-emerald-600",
  },
  {
    id: "hybrid" as LoanCategory,
    icon: GitMerge,
    title: "Hybrid Loan",
    description: "Capital pool with future collateral assignment",
    color: "text-purple-600",
  },
];

export function StepCategory() {
  const { control } = useFormContext<CreateLoanFormData>();

  return (
    <div className="space-y-4">
      <motion.div
        initial={{ opacity: 0, y: -10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <h2 className="mb-1 text-xl font-bold">Select Loan Category</h2>
        <p className="text-sm text-muted-foreground">
          Choose the type of loan to create. This determines the workflow and required information.
        </p>
      </motion.div>

      <FieldGroup>
        <Controller
          name="loanCategory"
          control={control}
          render={({ field, fieldState }) => (
            <FieldSet data-invalid={fieldState.invalid}>
              <FieldLegend>Loan Type</FieldLegend>
              <FieldDescription>
                Each category has a different workflow and requirements
              </FieldDescription>
              <RadioGroup
                name={field.name}
                value={field.value}
                onValueChange={field.onChange}
                aria-invalid={fieldState.invalid}
              >
                {LOAN_CATEGORIES.map((category) => {
                  const Icon = category.icon;
                  
                  return (
                    <FieldLabel
                      key={category.id}
                      htmlFor={`loan-category-${category.id}`}
                    >
                      <Field
                        orientation="horizontal"
                        data-invalid={fieldState.invalid}
                        className="items-start"
                      >
                        <FieldContent className="flex items-start gap-3">
                          <Icon className={`mt-0.5 size-5 flex-shrink-0 ${category.color}`} />
                          <div className="flex-1">
                            <FieldTitle>{category.title}</FieldTitle>
                            <FieldDescription>{category.description}</FieldDescription>
                          </div>
                        </FieldContent>
                        <RadioGroupItem
                          value={category.id}
                          id={`loan-category-${category.id}`}
                          aria-invalid={fieldState.invalid}
                        />
                      </Field>
                    </FieldLabel>
                  );
                })}
              </RadioGroup>
              {fieldState.invalid && (
                <FieldError errors={[fieldState.error]} />
              )}
            </FieldSet>
          )}
        />
      </FieldGroup>
    </div>
  );
}
