"use client";

/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: components/data-table/data-table-view-options.tsx
 - Purpose: Reusable React UI component data-table-view-options.tsx.
 - Context: Composes UI from smaller primitives and domain data.
 - How it works: Renders UI based on props and context; defers side effects to hooks. Uses: React Client Component.
 - External imports: @tanstack/react-table, lucide-react
 - Local imports: @/components/ui/button, @/components/ui/dropdown-menu
 - Refactoring ideas: Split complex components into smaller units. | Memoize expensive subtrees and handlers. | Extract data fetching into hooks/services.
 - Security considerations: Avoid dangerouslySetInnerHTML; sanitize any HTML content. | Do not embed secrets or tokens in client code. | Harden forms against CSRF where applicable.
*/
import { Table } from "@tanstack/react-table";
import { Settings2 } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";

interface DataTableViewOptionsProps<TData> {
  table: Table<TData>;
}

export function DataTableViewOptions<TData>({ table }: DataTableViewOptionsProps<TData>) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="sm" className="ml-auto hidden h-8 lg:flex">
          <Settings2 />
          View
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[150px]">
        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {table
          .getAllColumns()
          .filter((column) => typeof column.accessorFn !== "undefined" && column.getCanHide())
          .map((column) => {
            return (
              <DropdownMenuCheckboxItem
                key={column.id}
                className="capitalize"
                checked={column.getIsVisible()}
                onCheckedChange={(value) => column.toggleVisibility(!!value)}
              >
                {column.id}
              </DropdownMenuCheckboxItem>
            );
          })}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
