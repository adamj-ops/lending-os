/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: components/data-table/draggable-row.tsx
 - Purpose: Reusable React UI component draggable-row.tsx.
 - Context: Composes UI from smaller primitives and domain data.
 - How it works: Renders UI based on props and context; defers side effects to hooks.
 - External imports: @dnd-kit/sortable, @dnd-kit/utilities, @tanstack/react-table
 - Local imports: @/components/ui/table
 - Refactoring ideas: Split complex components into smaller units. | Memoize expensive subtrees and handlers. | Extract data fetching into hooks/services.
 - Security considerations: Avoid dangerouslySetInnerHTML; sanitize any HTML content. | Do not embed secrets or tokens in client code. | Harden forms against CSRF where applicable.
*/
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Row, flexRender } from "@tanstack/react-table";

import { TableCell, TableRow } from "@/components/ui/table";

export function DraggableRow<TData>({ row }: { row: Row<TData> }) {
  const { transform, transition, setNodeRef, isDragging } = useSortable({
    id: (row.original as { id: number }).id,
  });
  return (
    <TableRow
      data-state={row.getIsSelected() && "selected"}
      data-dragging={isDragging}
      ref={setNodeRef}
      className="relative z-0 data-[dragging=true]:z-10 data-[dragging=true]:opacity-80"
      style={{
        transform: CSS.Transform.toString(transform),
        transition: transition,
      }}
    >
      {row.getVisibleCells().map((cell) => (
        <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
      ))}
    </TableRow>
  );
}
