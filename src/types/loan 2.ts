/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: types/loan 2.ts
 - Purpose: Shared TypeScript types and interfaces.
 - Context: Ensures type safety across modules and features.
 - How it works: Provides shared data contracts to prevent type drift across modules.
 - Refactoring ideas: Prefer discriminated unions over stringly-typed fields. | Use readonly where mutation is not intended.
 - Security considerations: Mark sensitive fields and avoid accidental serialization.
*/
export enum LoanStatus {
  DRAFT = "draft",
  SUBMITTED = "submitted",
  VERIFICATION = "verification",
  UNDERWRITING = "underwriting",
  APPROVED = "approved",
  CLOSING = "closing",
  FUNDED = "funded",
  REJECTED = "rejected",
}

export enum LoanCategory {
  ASSET_BACKED = "asset_backed",
  YIELD_NOTE = "yield_note",
  HYBRID = "hybrid",
}

export enum PaymentType {
  INTEREST_ONLY = "interest_only",
  AMORTIZED = "amortized",
}

export enum PaymentFrequency {
  MONTHLY = "monthly",
  QUARTERLY = "quarterly",
  MATURITY = "maturity",
}

export enum BorrowerRole {
  PRIMARY = "primary",
  CO_BORROWER = "co-borrower",
  GUARANTOR = "guarantor",
}

export enum LenderRole {
  PRIMARY = "primary",
  PARTICIPANT = "participant",
}

export interface Loan {
  id: string;
  organizationId: string;
  
  // Loan category (v2)
  loanCategory: LoanCategory;
  
  // Foreign keys (nullable for different loan types)
  borrowerId: string | null;
  lenderId: string | null;
  propertyId: string | null;
  
  // Core loan details
  propertyAddress: string | null; // Optional for yield_note
  principal: string; // v2: renamed from loanAmount
  rate: string; // v2: renamed from interestRate
  termMonths: number;
  
  // Payment structure (v2)
  paymentType: PaymentType;
  paymentFrequency: PaymentFrequency;
  
  // Fees in basis points (v2)
  originationFeeBps: number | null;
  lateFeeBps: number | null;
  defaultInterestBps: number | null;
  
  // Additional features (v2)
  escrowEnabled: boolean;
  
  // Status tracking
  status: LoanStatus;
  statusChangedAt: Date;
  
  // Audit fields (v2)
  createdBy: string | null;
  
  // Backward compatibility (deprecated)
  loanAmount?: string; // Deprecated: use principal
  interestRate?: string; // Deprecated: use rate
  
  // Dates
  fundedDate: Date | null;
  maturityDate: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface LoanWithRelations extends Loan {
  // Primary borrower (from direct FK)
  borrower?: {
    id: string;
    firstName: string | null;
    lastName: string | null;
    email: string;
  };
  // Primary lender (from direct FK)
  lender?: {
    id: string;
    name: string;
    entityType: string;
  };
  property?: {
    id: string;
    address: string;
    city: string;
    state: string;
    propertyType: string;
  };
  // All borrowers including primary (from junction table)
  allBorrowers?: Array<{
    id: string;
    firstName: string | null;
    lastName: string | null;
    name: string | null;
    email: string;
    role: BorrowerRole;
    isPrimary: boolean;
  }>;
  // All lenders including primary (from junction table)
  allLenders?: Array<{
    id: string;
    name: string;
    entityType: string;
    contactEmail: string;
    role: LenderRole;
    isPrimary: boolean;
    percentage: string | null;
  }>;
}

export interface CreateLoanDTO {
  organizationId: string;
  loanCategory: LoanCategory;
  borrowerId?: string;
  lenderId?: string;
  propertyId?: string;
  propertyAddress?: string;
  principal: number | string;
  rate: number | string;
  termMonths: number;
  paymentType?: PaymentType;
  paymentFrequency?: PaymentFrequency;
  originationFeeBps?: number;
  lateFeeBps?: number;
  defaultInterestBps?: number;
  escrowEnabled?: boolean;
  status?: LoanStatus;
  fundedDate?: Date;
  maturityDate?: Date;
  createdBy?: string;
  
  // Backward compatibility
  loanAmount?: number | string;
  interestRate?: number | string;
}

export interface UpdateLoanDTO {
  borrowerId?: string | null;
  lenderId?: string | null;
  propertyId?: string | null;
  propertyAddress?: string;
  principal?: number | string;
  rate?: number | string;
  termMonths?: number;
  paymentType?: PaymentType;
  paymentFrequency?: PaymentFrequency;
  originationFeeBps?: number;
  lateFeeBps?: number;
  defaultInterestBps?: number;
  escrowEnabled?: boolean;
  status?: LoanStatus;
  fundedDate?: Date | null;
  maturityDate?: Date | null;
  
  // Backward compatibility
  loanAmount?: number | string;
  interestRate?: number | string;
}

