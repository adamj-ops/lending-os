/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: db/clear 2.ts
 - Purpose: Database utilities, clients, and scripts.
 - Context: Defines and interacts with the persistence layer.
 - How it works: Initializes DB clients and runs maintenance scripts (migrate/seed/clear). Uses: Drizzle ORM.
 - External imports: dotenv, drizzle-orm/postgres-js, postgres, drizzle-orm
 - Refactoring ideas: Add indexes for frequent query paths. | Enforce constraints at the schema level. | Document migration rationale and rollback plans.
 - Security considerations: Constrain data with not-null and foreign keys. | Protect PII with encryption at rest where needed.
*/
import { config } from "dotenv";
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import { sql } from "drizzle-orm";

// Load environment variables from .env.local
config({ path: ".env.local" });

async function clearDatabase() {
  if (!process.env.DATABASE_URL) {
    throw new Error("DATABASE_URL environment variable is not set");
  }

  console.log("üóëÔ∏è  Clearing database...");

  const connection = postgres(process.env.DATABASE_URL, { max: 1 });
  const db = drizzle(connection);

  try {
    // Clear all tables in order (respecting foreign key constraints)
    await db.execute(sql`TRUNCATE loans CASCADE`);
    await db.execute(sql`TRUNCATE user_organizations CASCADE`);
    await db.execute(sql`TRUNCATE sessions CASCADE`);
    await db.execute(sql`TRUNCATE users CASCADE`);
    await db.execute(sql`TRUNCATE organizations CASCADE`);

    console.log("‚úÖ Database cleared successfully!");
  } catch (error) {
    console.error("‚ùå Clear failed:", error);
    process.exit(1);
  } finally {
    await connection.end();
  }
}

clearDatabase();

