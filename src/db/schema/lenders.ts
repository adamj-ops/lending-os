/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: db/schema/lenders.ts
 - Purpose: Database schema and table definitions (Drizzle ORM).
 - Context: Defines and interacts with the persistence layer.
 - How it works: Declares tables, columns, and relationships; migrations align the database to these definitions.
 - External imports: drizzle-orm/pg-core
 - Local imports: ./organizations
 - Refactoring ideas: Add indexes for frequent query paths. | Enforce constraints at the schema level. | Document migration rationale and rollback plans.
 - Security considerations: Constrain data with not-null and foreign keys. | Protect PII with encryption at rest where needed.
*/
import { pgTable, text, timestamp, uuid, numeric, pgEnum, index } from "drizzle-orm/pg-core";
import { organizations } from "./organizations";

export const entityTypeEnum = pgEnum("entity_type", [
  "individual",
  "company",
  "fund",
  "ira",
]);

export const lenders = pgTable("lenders", {
  id: uuid("id").defaultRandom().primaryKey(),
  organizationId: uuid("organization_id")
    .notNull()
    .references(() => organizations.id, { onDelete: "cascade" }),
  name: text("name").notNull(),
  entityType: entityTypeEnum("entity_type").notNull(),

  // Contact
  contactEmail: text("contact_email").notNull(),
  contactPhone: text("contact_phone"),

  // v2: Investment tracking
  totalCommitted: numeric("total_committed", { precision: 15, scale: 2 }).notNull().default("0"),
  totalDeployed: numeric("total_deployed", { precision: 15, scale: 2 }).notNull().default("0"),

  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
  // Indexes for Epic E2
  organizationIdx: index("lenders_organization_id_idx").on(table.organizationId),
  emailIdx: index("lenders_email_idx").on(table.contactEmail),
}));

