/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: app/api/v1/loans/[id]/notes/[noteId]/route.ts
 - Purpose: HTTP route handlers for v1/loans/[id]/notes/[noteId] (App Router API).
 - Context: Exposes server-side endpoints consumed by UI and external clients.
 - How it works: Exports HTTP method handlers (e.g., GET/POST) that validate input, call services, and return structured JSON responses. Uses: Next.js App Router.
 - External imports: next/server
 - Local imports: @/services/loan.service
 - Refactoring ideas: Centralize input validation schemas and response helpers. | Enforce consistent error typing and status codes. | Consider rate limiting and per-user quotas.
 - Security considerations: Validate and sanitize all inputs; enforce authorization checks. | Avoid leaking sensitive fields in responses. | Consider rate limiting and audit logging.
*/
import { NextRequest, NextResponse } from "next/server";
import { LoanService } from "@/services/loan.service";

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string; noteId: string }> }
) {
  try {
    const { noteId } = await params;
    const body = await request.json();

    const note = await LoanService.updateNote(noteId, {
      content: body.content,
    });

    if (!note) {
      return NextResponse.json(
        { success: false, error: "Note not found" },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      data: note,
    });
  } catch (error) {
    console.error("Error updating loan note:", error);
    return NextResponse.json(
      { success: false, error: "Failed to update note" },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string; noteId: string }> }
) {
  try {
    const { noteId } = await params;
    const success = await LoanService.deleteNote(noteId);

    if (!success) {
      return NextResponse.json(
        { success: false, error: "Note not found" },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      message: "Note deleted successfully",
    });
  } catch (error) {
    console.error("Error deleting loan note:", error);
    return NextResponse.json(
      { success: false, error: "Failed to delete note" },
      { status: 500 }
    );
  }
}

