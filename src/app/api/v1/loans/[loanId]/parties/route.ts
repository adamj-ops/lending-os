/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: app/api/v1/loans/[loanId]/parties/route.ts
 - Purpose: HTTP route handlers for v1/loans/[loanId]/parties (App Router API).
 - Context: Exposes server-side endpoints consumed by UI and external clients.
 - How it works: Exports HTTP method handlers (e.g., GET/POST) that validate input, call services, and return structured JSON responses. Uses: Next.js App Router.
 - External imports: next/server
 - Local imports: @/services/loan.service
 - Refactoring ideas: Centralize input validation schemas and response helpers. | Enforce consistent error typing and status codes. | Consider rate limiting and per-user quotas.
 - Security considerations: Validate and sanitize all inputs; enforce authorization checks. | Avoid leaking sensitive fields in responses. | Consider rate limiting and audit logging.
*/
import { NextRequest, NextResponse } from "next/server";
import { LoanService } from "@/services/loan.service";

/**
 * GET /api/v1/loans/:loanId/parties
 * Get all borrowers and lenders for a loan (complete party list)
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ loanId: string }> }
) {
  try {
    const { loanId } = await params;

    // Fetch all borrowers and lenders in parallel
    const [borrowers, lenders] = await Promise.all([
      LoanService.getLoanBorrowers(loanId),
      LoanService.getLoanLenders(loanId),
    ]);

    return NextResponse.json({
      success: true,
      data: {
        borrowers,
        lenders,
        totalBorrowers: borrowers.length,
        totalLenders: lenders.length,
      },
    });
  } catch (error) {
    console.error("Error fetching loan parties:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to fetch loan parties",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

