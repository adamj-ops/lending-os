/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: app/api/v1/loans/[loanId]/payment-schedule/route.ts
 - Purpose: HTTP route handlers for v1/loans/[loanId]/payment-schedule (App Router API).
 - Context: Exposes server-side endpoints consumed by UI and external clients.
 - How it works: Exports HTTP method handlers (e.g., GET/POST) that validate input, call services, and return structured JSON responses. Uses: Next.js App Router.
 - External imports: next/server
 - Local imports: @/services/payment.service
 - Refactoring ideas: Centralize input validation schemas and response helpers. | Enforce consistent error typing and status codes. | Consider rate limiting and per-user quotas.
 - Security considerations: Validate and sanitize all inputs; enforce authorization checks. | Avoid leaking sensitive fields in responses. | Consider rate limiting and audit logging.
*/
import { NextRequest, NextResponse } from "next/server";
import { PaymentService } from "@/services/payment.service";

/**
 * GET /api/v1/loans/:loanId/payment-schedule
 * Get generated payment schedule for a loan
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ loanId: string }> }
) {
  try {
    const { loanId } = await params;

    const schedule = await PaymentService.generatePaymentSchedule(loanId);

    return NextResponse.json({
      success: true,
      data: schedule,
    });
  } catch (error) {
    console.error("Error generating payment schedule:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to generate payment schedule",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/v1/loans/:loanId/payment-schedule
 * Regenerate payment schedule for a loan
 */
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ loanId: string }> }
) {
  try {
    const { loanId } = await params;

    const schedule = await PaymentService.updatePaymentSchedule(loanId);

    return NextResponse.json({
      success: true,
      data: schedule,
    });
  } catch (error) {
    console.error("Error updating payment schedule:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to update payment schedule",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

