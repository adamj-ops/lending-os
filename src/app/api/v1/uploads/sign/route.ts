/*
 File Header (auto-generated by scripts/add-file-headers.ts)
 - File: app/api/v1/uploads/sign/route.ts
 - Purpose: HTTP route handlers for v1/uploads/sign (App Router API).
 - Context: Exposes server-side endpoints consumed by UI and external clients.
 - How it works: Exports HTTP method handlers (e.g., GET/POST) that validate input, call services, and return structured JSON responses. Uses: Next.js App Router.
 - External imports: next/server
 - Local imports: @/lib/s3-upload
 - Refactoring ideas: Centralize input validation schemas and response helpers. | Enforce consistent error typing and status codes. | Consider rate limiting and per-user quotas.
 - Security considerations: Validate and sanitize all inputs; enforce authorization checks. | Avoid leaking sensitive fields in responses. | Consider rate limiting and audit logging.
*/
import { NextRequest, NextResponse } from "next/server";
import { generatePresignedUrl } from "@/lib/s3-upload";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { fileName, fileType, folder } = body;

    if (!fileName || !fileType) {
      return NextResponse.json(
        { success: false, error: "fileName and fileType are required" },
        { status: 400 }
      );
    }

    const data = await generatePresignedUrl(fileName, fileType, folder);

    return NextResponse.json({
      success: true,
      data,
    });
  } catch (error) {
    console.error("Error generating presigned URL:", error);
    return NextResponse.json(
      { success: false, error: "Failed to generate upload URL" },
      { status: 500 }
    );
  }
}

